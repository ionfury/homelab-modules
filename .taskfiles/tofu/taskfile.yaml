---
version: "3"

vars:
  TOFU_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/tofu/resources'
  MODULES_DIR: '{{.ROOT_DIR}}/modules'

tasks:
  test:
    desc: Runs all tofu tests.
    vars:
      MODULES:
        sh: 'ls {{.MODULES_DIR}}'
    cmds:
      - for: { var: MODULES }
        task: test-{{.ITEM}}

  reset-*:
    desc: Resets the state of a specific machine.
    label: reset-{{.MACHINE}}
    vars:
      MACHINE: "{{index .MATCH 0}}"
      SCRIPT: "{{.TOFU_RESOURCES_DIR}}/reset_node.sh"
      TALOS_CONFIG_PATH: "~/.talos/testing"
    cmds:
      - "{{.SCRIPT}} {{.TALOS_CONFIG_PATH}} {{.MACHINE}}"
    preconditions:
      - which tofu
      - test -f {{.SCRIPT}}

  test-*:
    desc: Runs all the tofu tests for a specific module.
    label: test-{{.MODULE}}
    vars:
      MODULE: "{{index .MATCH 0}}"
      PATH: "{{.MODULES_DIR}}/{{.MODULE}}"
      TESTS:
        sh: find {{.PATH}} -type f -name '*.tftest.hcl' | xargs -n1 basename | sed 's/.tftest.hcl//'
    cmds:
      - for: { var: TESTS }
        task: test_{{.MODULE}}_{{.ITEM}}
  
  test_*_*:
    desc: Runs a specific test for a specific module.  Follows the format test_<module>_<test>
    label: test_{{.MODULE}}_{{.TEST}}
    dotenv: ['{{.TOFU_RESOURCES_DIR}}/test/.env']
    env:
      TF_IN_AUTOMATION: true
    vars:
      MODULE: "{{index .MATCH 0}}"
      MODULE_PATH: "{{.MODULES_DIR}}/{{.MODULE}}"
      TEST: "{{index .MATCH 1}}"
      TEST_FILE: "{{.TEST}}.tftest.hcl"
      TEST_PATH:
        sh: dirname $(find {{.MODULES_DIR}}/{{.MODULE}} -type f -name '{{.TEST_FILE}}')
      MODULE_RELATIVE_TEST_PATH: 
        sh: echo {{.TEST_PATH}} | sed 's|{{.MODULE_PATH}}||' | sed 's|^/\(.*\)$|\1/|'
    cmds:
      - task: use-pinned-version
      - task: lint-{{.MODULE}}
      - task: format-{{.MODULE}}
      - task: docs-{{.MODULE}}
      - task: validate-{{.MODULE}}
      - tofu -chdir={{.MODULE_PATH}} init -upgrade
      - tofu -chdir={{.MODULE_PATH}} test -filter={{.MODULE_RELATIVE_TEST_PATH}}{{.TEST_FILE}}
      - echo {{.MODULES_DIR}} {{.MODULE}} {{.TEST_PATH}}
    preconditions:
      - which tofu
      #- test -f {{.TOFU_RESOURCES_DIR}}/test/.env
      - test -d {{.TEST_PATH}}
      - test -f {{.TEST_PATH}}/{{.TEST_FILE}}
    sources:
      - '{{.MODULES_DIR}}/{{.MODULE}}/**/*.tf'
      - '{{.MODULES_DIR}}/{{.MODULE}}/**/*.tftpl'
      - '{{.MODULES_DIR}}/{{.MODULE}}/**/*.yaml'
      - '{{.TEST_PATH}}/**/*.tftest.hcl'

  use-pinned-version:
    desc: Use the pinned version of Open Tofu.
    vars:
      TOFU_PIN_FILE: '{{.TOFU_RESOURCES_DIR}}/.opentofu-version'
      TOFU_VERSION:
        sh: cat {{.TOFU_PIN_FILE}}
    cmds:
      - tofuenv install {{.TOFU_VERSION}}
      - tofuenv use {{.TOFU_VERSION}}
    preconditions:
      - which tofuenv
      - test -f {{.TOFU_PIN_FILE}}
    sources:
      - '{{.TOFU_PIN_FILE}}'

  fix:
    desc: Runs formatting, linting, and doc generation on all tofu modules.
    vars:
      MODULES:
        sh: 'ls {{.MODULES_DIR}}'
    cmds:
      - for: { var: MODULES }
        task: lint-{{.ITEM}}
      - for: { var: MODULES }
        task: format-{{.ITEM}}
      - for: { var: MODULES }
        task: docs-{{.ITEM}}

  check:
    desc: Runs all the checks for all modules.
    vars:
      MODULES:
        sh: 'ls {{.MODULES_DIR}}'
    cmds:
      - for: { var: MODULES }
        task: lint-{{.ITEM}}
        vars:
          FIX: "false"
      - for: { var: MODULES }
        task: format-{{.ITEM}}
        vars:
          FIX: "false"
      - for: { var: MODULES }
        task: docs-{{.ITEM}}
        vars:
          FIX: "false"

  lint-*:
    internal: true
    label: lint-{{.MODULE}}
    desc: Lints the tofu configuration files.
    vars:
      MODULE: "{{index .MATCH 0}}"
      MODULE_PATH: "{{.MODULES_DIR}}/{{.MODULE}}"
      FIX: '{{.FIX | default "true"}}'
    cmds:
      - tflint --chdir={{.MODULE_PATH}} --recursive {{if eq .FIX "true"}}--fix{{end}}
    preconditions:
      - which tflint
    sources:
      - '{{.MODULE_PATH}}/**/*.tf'
  
  format-*:
    internal: true
    desc: Formats the tofu configuration files.
    label: format-{{.MODULE}}
    vars:
      MODULE: "{{index .MATCH 0}}"
      MODULE_PATH: "{{.MODULES_DIR}}/{{.MODULE}}"
      FIX: '{{.FIX | default "true"}}'
    cmds:
      - tofu fmt {{if eq .FIX "false"}}-check{{end}} -recursive {{.MODULE_PATH}}   
    preconditions:
      - which tofu
    sources:
      - '{{.MODULE_PATH}}/**/*.tf'
    
  docs-*:
    internal: true
    desc: Generates docs for tofu modules.
    label: docs-{{.MODULE}}
    vars:
      MODULE: "{{index .MATCH 0}}"
      MODULE_PATH: "{{.MODULES_DIR}}/{{.MODULE}}"
    cmds: 
      - terraform-docs markdown --output-file {{.MODULE_PATH}}/README.md {{if eq .FIX "false"}}--output-check{{end}} {{.MODULE_PATH}}
    preconditions:
      - which terraform-docs
    sources:
      - '{{.MODULE_PATH}}/**/*.tf'
    generates:
      - '{{.MODULE_PATH}}/README.md'

  validate-*:
    internal: true
    desc: Validates the tofu configuration files for a specific module.
    label: validate-{{.MODULE}}
    vars:
      MODULE: "{{index .MATCH 0}}"
    cmds:
      - tofu -chdir={{.MODULES_DIR}}/{{.MODULE}} init -upgrade
      - tofu -chdir={{.MODULES_DIR}}/{{.MODULE}} validate
    preconditions:
      - which tofu
    sources:
      - '{{.MODULES_DIR}}/{{.MODULE}}/**/*.tf'
