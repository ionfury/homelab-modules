/*locals {
  path_to_data = "/data/test.txt"
  deployment_label_key = "app"
  deployment_label_value = "rwo-deployment"
}

terraform {
  required_version = ">= 1.8.8"
  required_providers {
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "2.35.1"
    }
  }
}

variable "kubeconfig_machine" {
  type = string
}

variable "kubeconfig_client_certificate" {
  type = string
}

variable "kubeconfig_client_key" {
  type = string
}

variable "kubeconfig_cluster_ca_certificate" {
  type = string
}

variable "write_data" {
  type    = string
  default = "Hello, World!"
}

provider "kubernetes" {
  machine                   = var.kubeconfig_machine
  client_certificate     = var.kubeconfig_client_certificate
  client_key             = var.kubeconfig_client_key
  cluster_ca_certificate = var.kubeconfig_cluster_ca_certificate
}

resource "kubernetes_manifest" "rwo_pvc" {
  manifest = provider::kubernetes::manifest_decode(file("${path.module}/resources/manifests/rwo-pvc.yaml"))

  wait {
    fields = {
      "status.phase" = "Bound"
    }
  }

  timeouts {
    create = "1m"
    update = "1m"
    delete = "1m"
  }
}

resource "kubernetes_manifest" "rwo_deployment" {
  depends_on = [kubernetes_manifest.rwo_pvc]
  manifest = provider::kubernetes::manifest_decode(file("${path.module}/resources/manifests/rwo-deployment.yaml"))

  wait {
    rollout = true
  }

  # Write var.write_data into /data/test.txt in the pod.
  provisioner "local-exec" {
    command = <<EOT
      kubectl exec -it $(kubectl get pods -l ${local.deployment_label_key}=${local.deployment_label_value} -o jsonpath='{.items[0].metadata.name}') -- sh -c 'echo ${var.write_data} > ${local.path_to_data}'
    EOT
  }
}

resource "null_resource" "restart_pod" {
  depends_on = [kubernetes_manifest.rwo_deployment]
  provisioner "local-exec" {
    command = <<EOT
      kubectl rollout restart deployment ${local.deployment_label_value}
      kubectl wait --for=condition=ready pod -l ${local.deployment_label_key}=${local.deployment_label_value} --timeout=60s
    EOT
  }
}

data "kubernetes_pod" "data_pod" {
  depends_on = [null_resource.restart_pod]
  
  metadata {
    labels = {
      local.deployment_label_key = local.deployment_label_value
    }
  }
}

data "external" "extracted_data" {
  depends_on = [ data.kubernetes_pod.data_pod ]
  program = ["bash", "${path.module}/resources/extract_data.sh"]

  query = {
    pod_name     = data.kubernetes_pod.data_pod.metadata[0].name
    namespace    = data.kubernetes_pod.data_pod.metadata[0].namespace
    path_to_data = local.path_to_data
  }
}

output "extracted_data" {
  value = data.external.extracted_data.result.extracted_data
}
*/
